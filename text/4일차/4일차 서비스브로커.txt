
	* Service Package concept
	
		- 서비스브로커는 외부에서 제작한 서비스들이다.
		  클라우드 브로커는 외부에서 제작한 서비스들을 사용할 수 있게
		  중개역할을 해주는 일을한다.
		  
		- Service API
		  1.개방형 클라우드 플랫폼 Service API 는 Cloud Controller 와 Service Broker 사이의
		    규약을 정의 
		  2.Broker는 HTTP(or HTTPS) endpoints URI 형식으로 구현되었다.  
		  3.하나 이상의 Service가 하나의 Broker 에 의해 제공 될 수 있고, 로드 밸런싱이
		    가능하게 수평 확장성 있게 제공 될 수 있다.  
		  4.서비스는 Service Broker API 라고 불리우는 cloud controller 클라이언트 API를 
		    구현하여 개방형 클라우드 플랫폼에서 사용된다.  
		  5.Services API 는 독립적인 cloud contoller 의 API 버전  
		  6.이는 플랫폼에서 외부 application 을 이용하능하게 한다.  
		  7.Service Broker 는 RESTful API로 구현하고 Cloud Controller 등록한다.
		  8.총 6개의 api로 통신을한다.
		  
		  
		- 개발 가이드
		  1.개방형 클라우드 플랫폼은 서비스 제공자가 6가지의 Service Broker API를 구현
		  2.이때 2.4 Pivotal Marketplace Model를 이용해서 AppDirect 에서 제공중인 서비스 제공자와
		    협의 하여 AppDirect의 중개 기능을 이용해서 제공할 수도 있다.
		  3.또한 Broker 는 별도의 애플리케이션을 구현하든지 기존 서비스에 필요한 HTTP endpoint를 추가함으로써 구현 될 수 있다.
		  4.개발 가이드는 Service Broker에서 service back-end를 제어하는 방식을 가이드한다.
		  
		- Service Broker 는 6개의 기본 API 기능이 필요
		  ServiceBrokerApi 정의서.png 참조
		  
		  
		- 인증
		  1.Cloud Controller는 모든 요청에 HTTP 기본 인증(인증 헤더)를 사용하여 Broker와
		    인증하여 사용자 이름과 암호를 포함하지 않는 모든 Broker 등록을 거부
		  2.Broker 는 사용자 이름과 암호를 확인하고 자격 증명이 유효하지 않은 경우 401 Una uthorized 메시지를 반환
		  3.Cloud Controller 에서 추가 보안이 요구되는 경우 SSL 을 사용하여 브로커에 접속지원
		  
		- Catalog API 가이드
		  1.서비스 Catalog는 서비스 및 서비스 Plan의 정보를 조회
		  2.Cloud Controller 는 처음에 모든 Broker에서 endpoint를 취득해서 Cloud
		    Controller 데이터베이스에 저장되어 있는 user-facing service catalog 를 조회
		  3.또한 Cloud Controller는 Broker가 업데이터 될 때 마다 catalog를 업데이트한다.
		  4.Catalog API를 구현하면 CF CLI를 통해서 Service Broker 를 등록할 수 있다.
		  
		- Provision API 가이드
		  1.Dashboard Single Sign-On. Single Sign-On (SSO)는 개방형 클라우드 플랫폼
		    사용자들이 개방형 클라우드 플랫폼 자격 증명을 사용하여 third-party 서비스의 대시 보드에 접근
		  2.서비스 대시 보드는 서비스가 제공하는 기능의 일부 또는 전부를 사용할 수 있는 웹 인터페이스
		  3.SSO는 반복되는 로그인과 여러 서비스의 계정을 통합 관리한다. OAuth2 프로토콜 인증을
		    처리하기 때문에 사용자의 자격 증명은 직접 서비스로 전송하지 않는다.
		  4.SSO 기능을 사용하려면 Cloud Controller UAA client에 서비스 브로커의 생성 및 삭제
		    할 수 있는 권한이 있어야 한다.
		  5.이 클라이언트는 개방형 클라우드 플랫폼 설치시 구성
		  
		  - 서비스 별 Provision API 개발 명세
		    1.인스턴스 생성시 unique 한 이름으로 생성
			2.생성 요청한 인스턴스 ID가 이미 존재 하는지 체크
			3.선택 한 plan 정보로 인스턴스가 생성 가능한지 체크 하고 가능할 경우
			  해당 인스턴스를 생성
			4.인스턴스 생성이 완료 되면 위에서 기술된 JSON Object 형식으로 Cloud
			  Controller 에 전송
		  
		  - Mysql 경우
		    1.생성할 데이터 베이스가 존재 하는지 체크: SHOW DATABASES LIKE '${instance.database}'
			2.새로운 데이터 베이스 생성: CREATE DATABASE IF NOT EXISTS '${instance.database}'
			3.생성 후 Dashboard 정보를 JSON Object 형식으로 Cloud Controller에 전송
		
		
		  - Update Instance API 가이드
		    1.update instance api는 기존의 서비스 인스턴스의 plan를 수정, 즉 서비스
			  인스턴스의 plan을 업그레이드나 다운그레이드 한다.
			2.이 기능을 사용하려면 브로커는 카탈로그 endpoint 에서 plan_updateable:true 설정해야한다.
			3.이 옵션 필드가 포함되어 있지 않은 경우에는 service plan 변경 요청에 대해 의미 있는 오류를
			  반환하고 브로커는 api호출을 하지 않는다.
			4.이 필드가 포함된 경우 개방형 클라우드 플랫폼의 모든 plan 변경 요청에 브로커로
			  api 호출을 수행하며 브로커에서는 plan 지원 여부를 확인한다.
			  
		  
		  - 서비스 별 update service instance api 개발 명세
			1.현재 제공중인 plan정보와 변경 요청 받은 plan 정보가 다른지 체크
			2.다운 그레이드 할 경우 이미 사용하는 용량이 다운 그레이드 할 용량보다 클 경우
			  에러를 발생시킨다.
			3.업그레이드 할 경우 plan 정보를 업데이트한다.
			4.변경된 내용을 Cloud Controller 에 전달 
			
			
		  - Deprovision API 가이드
		    브로커가 개방형 클라우드 플랫폼으로부터 DEPROVISION 요청을 수신 할 때
			PROVISION 생성시 제공했던 모든 리로스를 삭제
			
		  - 서비스 별 deprovision api 개발 명세
		    1.삭제 요청하는 서비스 인스턴스가 존재 하는지 체크
			2.인스턴스가 조재 하면 삭제할 인스턴스에 Application 이 bind 되어 있는지 체크
			3.만일 bind 되어 있는 Application이 존재 할 경우 Error를 Cloud Controller에 전송
			4.bind되어 있는 Application이 존재 하지 않을 경우 해당 서비스 인스턴스를 삭제
			
		  - bind API 가이드
		    1.Provision 만으로 서비스를 사용할 수 있을 경우에는 bind 기능 구현은 필요 없고
			  결과 성공 메시지만 개방형 클라우드 플랫폼에 전송하면된다.
			2.브로커가 개방형 클라우드 플랫폼으로부터 바인딩 요청을 수신할때 프로비저닝 된 자원을 활용하는데 필요한 정보를 반환
			3.해당 정보는 credentials(자격증명)안에 제공
			4.Application에 고유한 credentials(자격증명)을 발급하여 다른 Application에는 영향을 주어서는 안된다.
			
		  - Unbind API 가이드
		    1.바인딩 서비스를 제공하지 않는 브로커는 Unbind API를 구현할 필요가 없다.
			2.브로커가 개방형 클라우드 플랫폼으로부터 unbind 요청을 받으면
			  바인드에서 만든 모든 자원을 삭제한다.
			3.삭제 되면 service에 접근 할 수 없다.
			
			
		- 서비스 배포 및 등록
		  MySql 서비스 브로커 등록
		  - Mysql 서비스팩 배포가 완료 되었으면 Application에서 서비스 팩을 사용하기 위해
		    먼저 MySQL 서비스 브로커를 등록해 주어야 한다.
		  - 서비스 브로커 등록 시 PaaS-TA에서 서비스브로커를 등록할 수 있는 사용자로
		    로그인이 되어 있어야 한다.
			
			$ cf service-brokers 브로커 목록 조회 가능
			$ cf create-service-broker {서비스팩 이름} {서비스팩 사용자ID} {서비스팩 사용자비밀번호}
			 htt[://{서비스팩URL(IP)}
			 
			- 서비스팩 이름: 서비스 팩 관리를 위해 PaaS-TA에서 보여지는 명칭이다. 서비스 Marketplace에서는 각각의 API 서비스
			  명이 보여지니 여기서 명칭은 서비스팩 리스트의 명칭이다.
			- 서비스팩 사용자ID/ 비밀번호: 서비스팩에 접근할 수 있는 사용자 ID입니다. 서비스팩도 하나의
			  API 서버이기 때문에 아무나 접근을 허용할 수 없어 접근이 가능한 ID/비밀번호를 입력한다.
			- 서비스팩 URL: 서비스팩이 제공하는 API를 사용할 수 있는 URL을 입력한다.
			
		  - 특정 조직에 해당 서비스 접근 허용을 할당하고 접근 서비스 목록을 다시확인한다.
		    $ cf enable-service-access Mysql-DB
			$ cf service-access