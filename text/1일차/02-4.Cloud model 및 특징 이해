
    - SaaS 란? + Microservices + 모놀로그 서비스

        - Software as a Service
          주로 업무에서 사용하는 소프트웨어의 기능을 인터넷 등의 네트워크를 통해 필요한
          만큼 서비스로 이용할 수 있도록 제공하는 형태

        - 특징
          성숙된 SaaS 는 Multi Tenant, Configuration, Scalability 충족
            - 서비스를 계약하고, 사용자 계정이 준비되면 즉시 서비스 이용 가능
            - 인터넷을 통해 접속 가능해, 어디서나 휴대용 단말기로 접속 가능

            - Level1
                - ASP 와 유사한 형태
                - 각 고객별로 별도의 어플리케이션 인스턴스를 제공 !!!

            - Level2
                - 고객별로 애플리케이션 인스턴스를 제공
                - 고객별로 별도로 재공된 애플리케이션을 설정 기능에 의한 커스터마이징 !!!

            - Level3
                - 모든 고객을 하나의 인스턴스로 지원
                - 메타데이터를 통해 커스터마이징
                - 레벨 2와 비교하여 효율적인 자원관리가 가능

            - Level4
                - 부하분산 시스템에서 모든 고객을 지원하는 가장 성숙한 모델
                - 고객의 데이터를 분산 관리

        - 정의 (IaaS, PaaS 환경 위에서 Software 기능을 서비스로 제공함)
            - SaaS 개념
              SaaS는 주문형 SW 또는 서비스형 SW 라고도 하며, SW 및 관련 데이터를 중앙에서
              고나리하고 인터넷을 통해 접속하는 사용자에게 SW를 이용 할수 있도록 하는 모델로서 사용자들은
              필요한 기능을 필요한 만큼만 이용하고 요금을 지불하는 형태

            - SaaS 유형
                - 오피스, ERP, CRM 등 전통적인 SW 영역에서 발전하고 있는 기업용 기반 SaaS
                - 제조, 의료, 금융 등 개별 산업의 생산성 향상과 부가가치 창출을 위한 산업융합용 특화 SaaS
                - 문서저장, 형업 등 개인의 편리한 생활을 정보생활용 SaaS

            - SaaS 기술적 특징
                - 환경설정: 소스코드 레벨의 수정 없이 사용자의 요구사항을 수용(사용자가 필요한 기능은 설정을 통해 지원)
                - 다중 사용자 지원: 하나의 어플리케이션을 다수의 사용자가 공유하여 사용하는 다중 소유 아키텍처 지원
                - 확장성: 가용성 및 성능 지원을 위해 다수의 인스턴스를 생성하고 사용자의 데이터를 분산 관리하며,
                         가상화,분산병렬 처리 등을 통해 확장성 있는 서비스를 제공

            - 테넌트 (사용자 별로 격리된 환경인 테넌트 제공)
                - Application & Data (사용자가 독점적으로 이용하는 어플리케이션과 데이터 제공)
                - 보안 (테넌트 별 보안 정책 적용)
                - 가용성 (테넌트 별 가용성 보장)
                - 확장성 (사용자의 요구에 따라 용량 확대 및 축소)
                - 과금 (사용량 측정 및 과금)

            SaaS 는 IaaS 위에 바로 띄우는것보다 PaaS 위에 구축하는것이 좋다.


        - 개념
            - Native application (desk-top)
                - 특정 Platform 이나 Device 에서 사용되도록 개발된 Application
                - 해당 플랫폼에 일반적으로 설치된 기타 소프트웨어 및 운영 체제와 상호 작용하고 이를
                  활용할 수 있다.
                - 특정 장빌르 위한 하드웨어 및 소프트웨어를 사용할 수 있으며, 이는 네이티브 어플리케이션이 GPS 나
                  카메라같은 최신 기술을 모바일 디바이스에서 이용할 수 있다는 것을 의미한다.
                - 이는 native apps 의 장점이 Web apps 나 mobile cloud apps 보다 우위에 있다고 해석할 수 있다.

            - Web application
                - 표준 Web 기술을 사용하여 Platform 이나 Device 에 상관없이 사용되도록 개발된
                  Application
                - Client-server 소프트웨어 어플리케이션
                - 프로그램은 원격 서버에 저장되고 인터넷을 통해 웹 브라우저에서 실행

            - CLoud (native) application
                - Desktop application + Web application 으로 클라우드 환경에서 실행되는
                  에플리케이션 프로그램이다.
                - desktop app 과 같이 응답 속도가 빠르고 오프라인에서도 작업 가능
                - wep apps 처럼 특정 기기(device)에 종속될 필요가 없고 온라인으로 쉽게 업데이트 가능
                - 사용자가 통제 가능하지만, 사용자 컴퓨터나 저장장치의 저장공간을 사용할 수 없다.
                - 잘 작성된 cloud apps 는 desktop apps 의 호환성과 Web apps 의 휴대성을 모두 제공한다.

            - Cloud Native Application
              핵심은 서비스이다.
              Cloud-native application 은 최소의 상태 컴포넌트들이 격리된 상태의 서비스로 구성되며,
              각각의 서비스는 분산되고, 탄력적이며 수평적 확장성 있는 시스템으로 구성된다. 또한, 어플리케이션과
              각각의 독립적인 배포 단위는 클라우드 중심의 디자인 패턴들과 셀프서비스 가능한 탄력적인 플랫폼에서 운영
              되도록 설계되어 있다.

    * 중요 시험에 자주나온다고 한다.
        1일차 참고 이미지 참조!!!

        - 모놀로그식 서비스
            - 문제점 (통짜 구조조)
                - 규모가 큰 애플리케이션에서는 불리
                    1.빌드, 배포, 서버 기동 시 시간이 오래 걸림
                    2.한 두 사람의 실수는 전체 시스템의 빌드 실패를 유발 -> 프로젝트가 커질수록 협업하기 어려움
                    3.컴포넌트들이 서로 로컬 콜 기반으로 강하게 결합 -> 특정 컴포넌트나 모듈에서의 성능 문제나 장애가
                      다른 컴포넌트에까지 영향
                    4.코드가 너무 커져서 유지보수가 어렵다
                    5.기존 로직/데이터/인터페이스 등의 변경에 따른 영향을 파악하기 어려움

                - 배포가 잦은 시스템에 불리
                    1.사소한 컴포넌트의 수정인데도 전체 어플리케이션을 재컴파일하여 배포를 하고, QA를 거쳐야한다.

                - 새로운 기술에 대한 도입이 어려움
                    1.컴포넌트 별로, 기능/비기능적 특성에 맞춰서 다른 기술을 도입하고자 할 떄 유연하지 않음
                        예) 파일 업로드/ 다운 로드와 같이 IO 작업이 많은 컴포넌트의 경우 node.js 를 사용하는것이 좋을 수 있으나
                            어플리케이션이 자바로 개발되면 다른 기술 추가가 매우 어렵다.
                    2.On-Premise Cloud, CI 와 연계된 배포 자동화(Jarvis), 향후 Docker 와 같은 Container 기술과 연계 어려움

                - 경직성
                    1.시스템을 분리, DB의 분리 어려움
                    2.시스템간 연계의 증대에 대한 유연한 대응이 어렵다.
                    3.새로운 버전이나 기술의 도입 어려움 또는 불가능
                    4.조직의 비대화, 코드의 비대화 -> 변화에 대한 저항 또는 장벽으로 작용
                    5.한 어플리케이션에서 개발한 기능은 타 어플리케이션에서 사용하기 어렵다.


        - Microservices
            - 업무상의 기능 또는 역할을 하나의 기능 묶음으로 개발된 컴포넌트 -> 한가지의 역할만 수행
            - REST API 등을 통하여 서비스들의 기능을 제공하고 사용
            - 데이터를 공유하지 않고 서비스별로 독립적으로 가공하고 저장함

            하나의 기능을 구현하는데, 여러 개의 서비스를 조합하여 기능을 제공한다.
                예) 주문하기: 사용자 정보 조회, 상품 정보 조회, 신규 주문 생성
                쇼핑몰 웹 |- 사용자 관리 => 사용자 정보
                        |_ 상품 관리 => 상품 정보
                         |_ 주문 관리 => 주문 정보

            "마이크로 서비스 아키텍처 스타일이란 단일 어플리케이션을 자체 프로세스로 실행되고 경량 매커니즘(주로 HTTP 리소스 API)
             로 통신하는 작은 서비스들의 모음으로 개발하는 방식이다."

             - ONE THING
               한 가지 기능(비즈니스 관련 기능/역할)을 수행하는데 초점을 맞춘 서비스를

             - SMALL
               독립적이고 배포가능한 가장 작은 단위의 서비스로 분리하고

             - API
               API 를 통해 다른 서비스와 연계하며

             - AUTONOMOUS
               각각 자율적으로 개발, 운영. 즉, 독립적인 팀이 각 서비스의 개발과 운영을 담당


             - 특징
                - 작게 쪼개진, 범위가 명확한 다수의 작은 서비스들
                    1. 단일 책임 원칙
                    2. 도메인 주도 개발
                    3. 제한된 컨텍스트
                    4. 독립적으로 관리됨
                - 각 서비스의 명확한 소유권
                    1.일반적으로 DevOps 모델 필요/채택

                - 각각의 서비스들이 독립적이며 다른 서비스에 영향을 주지않고 독립적으로
                  업데이트되고 배치될 수 있어야 한다.


        - 아키텍처
            - 오로지 한 가지의 역할만 수행하는 서비스들이 서로 독립적이고 분권화 되어 있다.
            - 고립된 서비스들은 표준화된 api 를 통해서 서로 통신/결합 -> 다른 관련 서비스를 바꾸지 않고도 원하는 턱정 서비스만 변경
            - 구축 시 중점 사항: 느슨하게 결합된 구성요소들, 확장성, 코드의 분리, 업그레이드와 변경을 쉽고 빠르게 하고 유연성을 보장하는 상태
            - 자가 치료: 기계 고장으로 어플리케이션이 멈추면 자동 실행하고 이전의 상태로 복구할 수 있도록 개발
            - 데이터베이스의 비정규화: 서비스와 느슨하게 결합된 스키마 또는 각가의 microservice 별로 별개의 스키마 생성

            예시)
                서비스를 분할하고 서비스별로 별도의 "데이터베이스를 구축" 한다.


        - 장점
            - 보다 빠르고 간단한 배치와 롤백
                - 팀별 독립적인 Delivery 속도
            - 각 도메인에 적합한 프레임워크/도구/언어
                - 컴포넌트는 Python 언어로, 카탈로그 서비스는 Java 로
            - 더 큰 탄력성
                - 오류 격리
            - 더 나은 가용성
                - 단, 적합한 설계의 경우

        - 단점 1일차 파일 이미지 참고 => Microservices 의 단점.png

        - 고려사항 1일차 파일 이미지 참고 => Microservices 도입 고려사항.png3

        - 구현 Tip 1일차 파일 이미지 참고 => Microservices 구현 Tip.png

        - API Gateway 1일차 파일 이미지 참고 => API Gateway.png, API Gateway2.png, API Gateway3.png

        - 12 Factors=> Microservices 12개의 개발 원칙.png



