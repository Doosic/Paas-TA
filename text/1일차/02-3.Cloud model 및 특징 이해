
    - PaaS 란?

        - Platform as a Service
          기업의 애플리케이션 실행 환경 및 애플리케이션 개발 환경을 서비스로써
          제공하는 모델

        - 장점
          애플리케이션 실행 환경이나 데이터베이스 등이 미리 마련되어
          단기간에 애플리케이션을 개발하여 서비스를 제공할 수 있다.
          개발자가 필요한 모든것이 서비스화되어 제공되고 있다.
          하드웨어, 운영체제, middleware, database 설치 모든 고민을 하지 않아도된다.
          db도 무엇을 사용할지 설정만 하여 사용하면 될뿐.

            1.애플리케이션 개발, 실행, 관리 할 수 있게 하는 플랫폼을 제공
            2.SaaS의 개념을 개발 플랫폼에 확장한 방식
            3.개발을 위한 플랫폼 구축 필요 없이 웹에서 쉽게 빌려 쓸 수 있는 모델
            4.개발자는 개발에만 집중, 애플리케이션이 동작하는 주변 환경은 가져다 쓰는 구조
            5.개발에서 배포까지 라이프사이클이 짧아 DevOps 문화를 적용하기 용이하다.

        - 종류
            - public (사업자가 제공하는 클라우드)
              서비스 제공업체가 구축한 서버, 스토리지 등의 IT 인프라를
              기업들이 사용료를 내고 이용하는 방식
              (AWS, GoogleAppEngine)
                - 장점
                    1.비용절감: 하드웨어나 소프트웨어를 구매하지 않아도 되며, 사용한 서비스에 대해서만 지불
                    2.유지관리하지 않는다: 서비스 공급자가 유지 관리
                    3.높은 안전성: 광대한 서버 네트워크를 통해 실패를 방지한다.
                    4.무제한에 가까운 확장성: 비즈니스 요구 사항을 만족시키도록 주문형 리소스 사용가능

            - hybrid (설치하여 사용하는 클라우드, 내가 소유한 서버에 설치 가능)
              public 클라우드와 private 클라우드를 동시에 제공하고
              양쪽 장점만 선택해서 사용가능한 클라우드 서비스
              (Azure...)
                - 장점
                    1.제어: 조직이 중요한 데이터의 사설 인프라를 유지 관리 할 수 있다.
                    2.유연성: 필요할 때 공용 클라우드에서 추가 리소스를 활용할 수 있다.
                    3.비용 효율성: 공용 클라우드에 맞게 규모 조정가능하여 필요할 때만 추가 컴퓨팅 기능에 대해 지불
                    4.용이성: 워크로드를 점진적으로 마이그레이션 할 수 있으므로 부담없이 클라우드 전환 가능

            - private
              기업 자체적으로 데이터센터 안에 클라우드 환경을 구축해 사용하는 방식
                - 장점
                    1.유연성 향상: 특정 비즈니스 요구 사항을 만족시키기 위해 클라우드 환경을 사용자 지정할 수 있다.
                    2.보안 강화: 다른 사용자와 리소스를 공유하지 않으므로, 제한과 보안 수준을 강화할 수 있다.
                    3.높은 확장성: 사설 클라우드에서 여전히 공용 클라우드의 확장성과 효율성을 제공할 수 있다.
                      private 는 내가 구축한 서버의 환경 내에서 확장할 수 있는것이다.
                      public 은 서비스 제공자가 구성한 환경에서 확장할 수 있는것이다.

        - 동작 원리
            IaaS 자원 위에 여러 인스턴스들의 유기적인 조합으로 PaaS 가 동작한다.
            1.물리서버에서 Hypervisor 로 가상화
            2.VM 생성 (여기부터 PaaS-TA 의 영역)
            3.VM에 garden 을 이용해 Container 로 가상화
            4.앱 실행

            Application 이 실제 배포 시 PaaS 의 구성요소 중 Diego cell 에서의 모습
                1.배포 명령 실행
                2.Diego 컨테이너 생성
                3.Application 코드 배치
                4.적합한 Build pack 찾기 (지정가능. 지정하지 않을시 알아서 찾아준다.)
                5.컴파일 진행
                6.Droplet Archive(Application 이 동작할 수 있는 부가 요소를 모두 갖춘 형태)
                7.Blobstore 에 저장
                8.Application Instance 가 실행될 새로운 컨테이너 생성 요청
                9.release 스크립트 실행
                10.Application 동작

        - Org & Space 효과적으로 업무를 구분할 수 있는 논리적인 그룹 기능
          Org: 사용자들의 그룹(개발자 및 관리자 등...) 조직별 관리
            - 개인 또는 여러 공동 작업자가 소유하고 사용할 수 있는 개발 계정
            - 각 계정은 ORG 에 롤을 부여 받을 수 있다.
            - 권한: Org Manager, Org Auditor, Org Billing Manager, Org User

          Space: Org 에 종속적이다.
            - 모든 애플리케이션 및 서비스의 범위가 공간으로 지정
            - Space Developer 만이 애플리케이션 실행 및 서비스 연동 할 수 있다.
            - 권한: Space Manager(사용자 초대가능), Space Developer(애플리케이션 배포가능), Space Auditor

          정리)
            1.Org, Space 논리적으로 관리하는 기능이 있다.
            2.Space 는 Org 에 종속된다.
            3.모든 애플리케이션과 서비스는 Space 에만 구성할 수 있다.

    - 주요 용어
        Market Place 에서 준비되어있는 서비스를 골라서 사용한다.
        Application
        사용자가 제작한 결과물(Redis...)

        Service
        Application 동작에 필요한 부가 서비스 (MySql, MongoDB...)

        Application 과 Service 를 연동하여 사용한다. 서비스에서 골라담은걸 Application 에서 사용!

        - BOSH IaaS 환경에서 Stem cell, Deployment, Release 를 이용하여 VM 들을 관리한다.







